# -*- coding: utf-8 -*-
"""Tarea 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UvCyAlUM_wNpWrcqI0w8Y_bNJsKxtH-C

Alonso Fuentes Armando

####Binary search ###
La búsqueda binaria trata sobre como podemos buscar de una lista del arreglo un elemento en el, convencionalmente buscamos de manera lineal es decir haciendo una búsqueda de 1 en 1, descartando cada uno de los elementos hasta encontrar el indicado. Pero en la búsqueda binaria lo que haces es buscar en la mitad de tiempo y obtener un tiempo **O(logn)** .

Entonces, la importancia de este radica en las aplicaciones que ocupan esta manera de dividir el trabajo, el tan llamado "divide y venceras", una de sus aplicaciones es la compresión de datos o en las cuestiones gráficas como lo es un video, que se debe renderizar.

#### Binary search (Recursive) ####
"""

def binary_search(arr, low, high, x): 
    if high >= low: 
        mid = (high + low) // 2 
        if arr[mid] == x: 
            return mid 
        elif arr[mid] > x: 
            return binary_search(arr, low, mid - 1, x) 
        else: 
            return binary_search(arr, mid + 1, high, x) 
  
    else: 
        return -1

"""#### Ejemplos binary_search####"""

array=[3,4,15,20,14,15,78]
binary_search(array,0,len(array),78)

array2=[20,25,40,41,16,5,2]
binary_search(array2,0,len(array2),16)

"""#### Binary search iterative ####"""

def binarysearchit(arr, x): 
    low = 0
    high = len(arr) - 1
    mid = 0
  
    while low <= high: 
        mid = (high + low) // 2
        if arr[mid] < x: 
            low = mid + 1
        elif arr[mid] > x: 
            high = mid - 1
        else: 
            return mid 
    return -1

"""#### Ejemplos binary search iterative ####"""

array=[3,4,15,20,14,15,78]
binarysearchit(array,78)

array2=[20,25,40,41,16,5,2]
binarysearchit(array2,16)